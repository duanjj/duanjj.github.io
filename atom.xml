<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jasder</title>
  
  <link href="/jasder.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/jasder/jasder.github.io/"/>
  <updated>2017-02-15T01:38:30.000Z</updated>
  <id>https://github.com/jasder/jasder.github.io/</id>
  
  <author>
    <name>Jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Visual Studio Code试用(Ruby)</title>
    <link href="https://github.com/jasder/jasder.github.io/2016/05/29/visual-studio-code/"/>
    <id>https://github.com/jasder/jasder.github.io/2016/05/29/visual-studio-code/</id>
    <published>2016-05-29T14:56:43.000Z</published>
    <updated>2017-02-15T01:38:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Visual Studio Code（以下简称vscode）是一个轻量且强大的代码编辑器，由，支持Windows，OS X和Linux。内置JavaScript、TypeScript和Node.js支持，而且拥有丰富的插件生态系统，可通过安装插件来支持C++、C#、Python、PHP、Ruby等其他语言。</p>
<h3 id="试用感觉"><a href="#试用感觉" class="headerlink" title="试用感觉"></a>试用感觉</h3><p>总体感觉还行，插件比较完善。介于Editor和IDE之间，毕竟是微软开发的，个人感觉图形界面相比Sublime、Atom多很多，不太习惯。<br><img src="/jasder.github.io/2016/05/29/visual-studio-code/editor.png" alt="editor.png" title="">  </p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参考 <a href="https://code.visualstudio.com" target="_blank" rel="external">官网</a>，很详细了。</p>
<a id="more"></a>
<h3 id="试用的几个插件"><a href="#试用的几个插件" class="headerlink" title="试用的几个插件"></a>试用的几个插件</h3><ol>
<li><p><a href="">Git History</a><br>Git 历史 :</p>
<img src="/jasder.github.io/2016/05/29/visual-studio-code/git-log.png" alt="git-log.png" title="">  
</li>
<li><p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="external">Auto Rename Tag</a><br>修改 html 标签，自动帮你完成尾部闭合标签的同步修改:</p>
<img src="/jasder.github.io/2016/05/29/visual-studio-code/auto-rename-tag.gif" alt="auto-rename-tag.gif" title="">  
</li>
<li><p><a href="">Guides</a><br>缩进辅助线</p>
<img src="/jasder.github.io/2016/05/29/visual-studio-code/guide.png" alt="guide.png" title="">  
</li>
</ol>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p> <a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf" target="_blank" rel="external">快捷键</a>也蛮好用的，但是很多快捷键没有撤回功能, 不够高大上。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://segmentfault.com/a/1190000006697219" target="_blank" rel="external">https://segmentfault.com/a/1190000006697219</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Visual Studio Code（以下简称vscode）是一个轻量且强大的代码编辑器，由，支持Windows，OS X和Linux。内置JavaScript、TypeScript和Node.js支持，而且拥有丰富的插件生态系统，可通过安装插件来支持C++、C#、Python、PHP、Ruby等其他语言。&lt;/p&gt;
&lt;h3 id=&quot;试用感觉&quot;&gt;&lt;a href=&quot;#试用感觉&quot; class=&quot;headerlink&quot; title=&quot;试用感觉&quot;&gt;&lt;/a&gt;试用感觉&lt;/h3&gt;&lt;p&gt;总体感觉还行，插件比较完善。介于Editor和IDE之间，毕竟是微软开发的，个人感觉图形界面相比Sublime、Atom多很多，不太习惯。&lt;br&gt;&lt;img src=&quot;/jasder.github.io/2016/05/29/visual-studio-code/editor.png&quot; alt=&quot;editor.png&quot; title=&quot;&quot;&gt;  &lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;参考 &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;官网&lt;/a&gt;，很详细了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nvm(npm包管理工具)</title>
    <link href="https://github.com/jasder/jasder.github.io/2015/11/24/nvm/"/>
    <id>https://github.com/jasder/jasder.github.io/2015/11/24/nvm/</id>
    <published>2015-11-24T12:26:22.000Z</published>
    <updated>2017-02-15T01:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac-OSX"><a href="#Mac-OSX" class="headerlink" title="Mac OSX"></a>Mac OSX</h3><ol>
<li><p>使用 brew 安裝 NVM</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install nvm</div></pre></td></tr></table></figure>
</li>
<li><p>安装成功后，将下面指令加入到.bash_profile（或 .bashrc）我用的是.zshrc文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR=~/.nvm</div><div class="line">source $(brew --prefix nvm)/nvm.sh</div></pre></td></tr></table></figure>
</li>
<li><p>重新载入上述文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">source</span> ~/.zshrc （或者 ~/.bash_profile 或 ~/bashrc）</div></pre></td></tr></table></figure>
</li>
<li><p>检测nvm</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm --version</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="使用-NVM-安裝-Node-js"><a href="#使用-NVM-安裝-Node-js" class="headerlink" title="使用 NVM 安裝 Node.js"></a>使用 NVM 安裝 Node.js</h3><p><strong>找出目前所有可安裝的 Node.js 版本</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ nvm ls-remote</div><div class="line"></div><div class="line">    v0.11.8</div><div class="line">    v0.11.9</div><div class="line">    v0.11.10</div><div class="line">    v0.11.11</div><div class="line">    v0.11.12</div><div class="line">    v0.11.13</div><div class="line">    v0.11.14</div><div class="line">    v0.11.15</div><div class="line">    v0.11.16</div><div class="line">    ...</div><div class="line">    v6.8.0</div><div class="line">    v6.8.1</div><div class="line">    v6.9.0   (LTS: Boron)</div><div class="line">    v6.9.1   (LTS: Boron)</div><div class="line">    v6.9.2   (Latest LTS: Boron)</div><div class="line">    v7.0.0</div><div class="line">    v7.1.0</div><div class="line">    v7.2.0</div><div class="line">    v7.2.1</div><div class="line">    v7.3.0</div></pre></td></tr></table></figure></p>
<p><strong>安裝 Node.js (v6.9.0)</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install v6.9.0</div></pre></td></tr></table></figure></p>
<p><strong>nvm指定使用Node.js版本</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nvm use v6.9.0</div><div class="line">Now using node v6.9.0 (npm v3.10.8)</div></pre></td></tr></table></figure></p>
<p><strong>指定默认使用的版本</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nvm <span class="built_in">alias</span> default v6.9.</div><div class="line">default -&gt; v6.9.0</div></pre></td></tr></table></figure></p>
<p><strong>列出所有安裝的版本</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ nvm ls</div><div class="line">-&gt;       v6.9.0</div><div class="line">         v6.9.2</div><div class="line">         system</div><div class="line">default -&gt; v6.9.0</div><div class="line">node -&gt; stable (-&gt; v6.9.2) (default)</div><div class="line">stable -&gt; 6.9 (-&gt; v6.9.2) (default)</div><div class="line">iojs -&gt; N/A (default)</div><div class="line">lts/* -&gt; lts/boron (-&gt; v6.9.2)</div><div class="line">lts/argon -&gt; v4.7.0 (-&gt; N/A)</div><div class="line">lts/boron -&gt; v6.9.2</div></pre></td></tr></table></figure></p>
<p><strong>測試 Node.js</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v6.9.2</div></pre></td></tr></table></figure></p>
<p><strong>測試 npm</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm -v</div><div class="line">3.10.9</div></pre></td></tr></table></figure></p>
<h3 id="配置-npm-源（可选）"><a href="#配置-npm-源（可选）" class="headerlink" title="配置 npm 源（可选）"></a>配置 npm 源（可选）</h3><p>nvm 安装 node 的同时会安装 npm。但是，国外源的速度和稳定性毕竟不让人放心。淘宝为大家提供了一个完整 npm 镜像 <a href="http://npm.taobao.org/。" target="_blank" rel="external">http://npm.taobao.org/。</a><br>我们可以使用淘宝提供的 <strong><em>cnpm</em></strong> 替代 <strong><em>npm</em></strong> 使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>这样安装模块的时候:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install [name]</div></pre></td></tr></table></figure></p>
<p>使用的就是淘宝的源了。 它支持除了 npm publish 之外的所有命令。</p>
<h3 id="使用-nvmrc-文件配置项目所使用的-node-版本"><a href="#使用-nvmrc-文件配置项目所使用的-node-版本" class="headerlink" title="使用 .nvmrc 文件配置项目所使用的 node 版本"></a>使用 .nvmrc 文件配置项目所使用的 node 版本</h3><p>每个版本的Node都会自带一个不同版本的npm，可以用npm -v来查看npm的版本。全局安装的npm包并不会在不同的Node环境中共享，因为这会引起兼容问题。它们被放在了不同版本的目录下，例如~/.nvm/versions/node/<version>/lib/node_modules</version>这样的目录。这刚好也省去我们在Linux中使用sudo的功夫了。因为这是用户的主文件夹，并不会引起权限问题。<br>如果默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ touch .nvmrc</div><div class="line">$ <span class="built_in">echo</span> 5.9.0 &gt; .nvmrc</div></pre></td></tr></table></figure></p>
<p>进入当前项目后，运行如下命令即可切换到该项目对应的node版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nvm use </div><div class="line">Found <span class="string">'/Users/djs/work/jasduaner-blog/.nvmrc'</span> with version &lt;v6.9.2&gt;</div><div class="line">Now using node v6.9.2 (npm v3.10.9)</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://mac-osx-for-newbie-book.kejyun.com/software/softwareWebDeveloperNodeJS.html" target="_blank" rel="external">Mac OSX Install</a><br><a href="https://github.com/creationix/nvm">nvm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mac-OSX&quot;&gt;&lt;a href=&quot;#Mac-OSX&quot; class=&quot;headerlink&quot; title=&quot;Mac OSX&quot;&gt;&lt;/a&gt;Mac OSX&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 brew 安裝 NVM&lt;/p&gt;
&lt;figure class=&quot;highlig
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nvm管理多版本Node.js</title>
    <link href="https://github.com/jasder/jasder.github.io/2015/11/24/nvm-manage-node-version/"/>
    <id>https://github.com/jasder/jasder.github.io/2015/11/24/nvm-manage-node-version/</id>
    <published>2015-11-24T12:26:22.000Z</published>
    <updated>2017-02-15T01:35:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac-OSX"><a href="#Mac-OSX" class="headerlink" title="Mac OSX"></a>Mac OSX</h3><ol>
<li><p>使用 brew 安裝 NVM</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install nvm</div></pre></td></tr></table></figure>
</li>
<li><p>安装成功后，将下面指令加入到.bash_profile（或 .bashrc）我用的是.zshrc文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR=~/.nvm</div><div class="line">source $(brew --prefix nvm)/nvm.sh</div></pre></td></tr></table></figure>
</li>
<li><p>重新载入上述文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">source</span> ~/.zshrc （或者 ~/.bash_profile 或 ~/bashrc）</div></pre></td></tr></table></figure>
</li>
<li><p>检测nvm</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm --version</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="使用-NVM-安裝-Node-js"><a href="#使用-NVM-安裝-Node-js" class="headerlink" title="使用 NVM 安裝 Node.js"></a>使用 NVM 安裝 Node.js</h3><p><strong>找出目前所有可安裝的 Node.js 版本</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ nvm ls-remote</div><div class="line"></div><div class="line">    v0.11.8</div><div class="line">    v0.11.9</div><div class="line">    v0.11.10</div><div class="line">    v0.11.11</div><div class="line">    v0.11.12</div><div class="line">    v0.11.13</div><div class="line">    v0.11.14</div><div class="line">    v0.11.15</div><div class="line">    v0.11.16</div><div class="line">    ...</div><div class="line">    v6.8.0</div><div class="line">    v6.8.1</div><div class="line">    v6.9.0   (LTS: Boron)</div><div class="line">    v6.9.1   (LTS: Boron)</div><div class="line">    v6.9.2   (Latest LTS: Boron)</div><div class="line">    v7.0.0</div><div class="line">    v7.1.0</div><div class="line">    v7.2.0</div><div class="line">    v7.2.1</div><div class="line">    v7.3.0</div></pre></td></tr></table></figure></p>
<p><strong>安裝 Node.js (v6.9.0)</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm install v6.9.0</div></pre></td></tr></table></figure></p>
<p><strong>nvm指定使用Node.js版本</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nvm use v6.9.0</div><div class="line">Now using node v6.9.0 (npm v3.10.8)</div></pre></td></tr></table></figure></p>
<p><strong>指定默认使用的版本</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ nvm <span class="built_in">alias</span> default v6.9.</div><div class="line">default -&gt; v6.9.0</div></pre></td></tr></table></figure></p>
<p><strong>列出所有安裝的版本</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ nvm ls</div><div class="line">-&gt;       v6.9.0</div><div class="line">         v6.9.2</div><div class="line">         system</div><div class="line">default -&gt; v6.9.0</div><div class="line">node -&gt; stable (-&gt; v6.9.2) (default)</div><div class="line">stable -&gt; 6.9 (-&gt; v6.9.2) (default)</div><div class="line">iojs -&gt; N/A (default)</div><div class="line">lts/* -&gt; lts/boron (-&gt; v6.9.2)</div><div class="line">lts/argon -&gt; v4.7.0 (-&gt; N/A)</div><div class="line">lts/boron -&gt; v6.9.2</div></pre></td></tr></table></figure></p>
<p><strong>測試 Node.js</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v6.9.2</div></pre></td></tr></table></figure></p>
<p><strong>測試 npm</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm -v</div><div class="line">3.10.9</div></pre></td></tr></table></figure></p>
<h3 id="配置-npm-源（可选）"><a href="#配置-npm-源（可选）" class="headerlink" title="配置 npm 源（可选）"></a>配置 npm 源（可选）</h3><p>nvm 安装 node 的同时会安装 npm。但是，国外源的速度和稳定性毕竟不让人放心。淘宝为大家提供了一个完整 npm 镜像 <a href="http://npm.taobao.org/。" target="_blank" rel="external">http://npm.taobao.org/。</a><br>我们可以使用淘宝提供的 <strong><em>cnpm</em></strong> 替代 <strong><em>npm</em></strong> 使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>这样安装模块的时候:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install [name]</div></pre></td></tr></table></figure></p>
<p>使用的就是淘宝的源了。 它支持除了 npm publish 之外的所有命令。</p>
<h3 id="使用-nvmrc-文件配置项目所使用的-node-版本"><a href="#使用-nvmrc-文件配置项目所使用的-node-版本" class="headerlink" title="使用 .nvmrc 文件配置项目所使用的 node 版本"></a>使用 .nvmrc 文件配置项目所使用的 node 版本</h3><p>每个版本的Node都会自带一个不同版本的npm，可以用npm -v来查看npm的版本。全局安装的npm包并不会在不同的Node环境中共享，因为这会引起兼容问题。它们被放在了不同版本的目录下，例如~/.nvm/versions/node/<version>/lib/node_modules</version>这样的目录。这刚好也省去我们在Linux中使用sudo的功夫了。因为这是用户的主文件夹，并不会引起权限问题。<br>如果默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ touch .nvmrc</div><div class="line">$ <span class="built_in">echo</span> 6.9.0 &gt; .nvmrc</div></pre></td></tr></table></figure></p>
<p>进入当前项目后，运行如下命令即可切换到该项目对应的node版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nvm use </div><div class="line">Found <span class="string">'/Users/djs/work/jasduaner-blog/.nvmrc'</span> with version &lt;v6.9.2&gt;</div><div class="line">Now using node v6.9.2 (npm v3.10.9)</div></pre></td></tr></table></figure></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://mac-osx-for-newbie-book.kejyun.com/software/softwareWebDeveloperNodeJS.html" target="_blank" rel="external">http://mac-osx-for-newbie-book.kejyun.com/software/softwareWebDeveloperNodeJS.html</a></p>
<p><a href="https://github.com/creationix/nvm">https://github.com/creationix/nvm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mac-OSX&quot;&gt;&lt;a href=&quot;#Mac-OSX&quot; class=&quot;headerlink&quot; title=&quot;Mac OSX&quot;&gt;&lt;/a&gt;Mac OSX&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 brew 安裝 NVM&lt;/p&gt;
&lt;figure class=&quot;highlig
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用Express框架构建API</title>
    <link href="https://github.com/jasder/jasder.github.io/2015/11/22/use-nodejs-express-structure-api/"/>
    <id>https://github.com/jasder/jasder.github.io/2015/11/22/use-nodejs-express-structure-api/</id>
    <published>2015-11-22T08:56:54.000Z</published>
    <updated>2017-02-15T01:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>假设这里已经安装了 <a href="https://nodejs.org/en/#download" target="_blank" rel="external">Node.js</a>，如何安装请参考官网。</p>
<h3 id="方法一-手动创建工程"><a href="#方法一-手动创建工程" class="headerlink" title="方法一(手动创建工程)"></a>方法一(手动创建工程)</h3><p>创建web应用目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir myapp</div><div class="line">$ <span class="built_in">cd</span> myapp</div></pre></td></tr></table></figure></p>
<p>使用 npm init 命令为应用程序创建 package.json 文件。 有关 package.json 工作方式的更多信息，请参阅 <a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="external">Specifics of npm’s package.json handling</a>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm init</div></pre></td></tr></table></figure></p>
<p>此命令提示您输入若干项，例如应用程序的名称和版本。 现在，只需按回车键以接受其中大多数项的缺省值，但以下情况例外：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">entry point: (index.js)</div></pre></td></tr></table></figure>
<p>输入 app.js，或者您希望使用的任何主文件名称。如果希望文件名为 index.js，请按回车键以接受建议的缺省文件名。</p>
<a id="more"></a>
<p>在 app 目录中安装 Express，然后将其保存在依赖项列表中。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install express --save</div></pre></td></tr></table></figure></p>
<p>以上命令会将 Express 框架安装在当期目录的 node_modules 目录中， node_modules 目录下会自动创建 express 目录。以下几个重要的模块是需要与 express 框架一起安装的：  </p>
<ul>
<li><strong>body-parser</strong> - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。  </li>
<li><strong>cookie-parser</strong> - 这是一个解析Cookie的工具，通过req.cookies可以获取到传过来的cookie，并把它们转成对象。  </li>
<li><strong>multer</strong> - node.js 中间件，用于处理 enctype=”multipart/form-data”(设置表单的MINE编码)的表单数据。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install body-parser --save</div><div class="line">$ npm install cookie-parser --save</div><div class="line">$ npm install multer --save</div></pre></td></tr></table></figure>
</li>
</ul>
<p>要暂时安装 Express 而不将其添加到依赖项列表中，请省略 –save 选项：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install express</div></pre></td></tr></table></figure></p>
<p>采用 –save 选项安装的 Node 模块已添加到 package.json 文件中的 dependencies 列表。 今后运行 app 目录中的 npm install 将自动安装依赖项列表中的模块。</p>
<p>使用以下命令运行应用程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node app.js</div></pre></td></tr></table></figure></p>
<h3 id="方法二-Express-应用程序生成器"><a href="#方法二-Express-应用程序生成器" class="headerlink" title="方法二(Express 应用程序生成器)"></a>方法二(Express 应用程序生成器)</h3><p>可使用应用程序生成器工具 (express) 快速创建应用程序框架。<br>使用以下命令安装 express：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install express-generator -g</div></pre></td></tr></table></figure></p>
<p>使用 -h 选项显示命令选项：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ express -h</div><div class="line"></div><div class="line">  Usage: express [options][dir]</div><div class="line"></div><div class="line">  Options:</div><div class="line"></div><div class="line">    -h, --help          output usage information</div><div class="line">        --version       output the version number</div><div class="line">    <span class="_">-e</span>, --ejs           add ejs engine support</div><div class="line">        --hbs           add handlebars engine support</div><div class="line">        --pug           add pug engine support</div><div class="line">    -H, --hogan         add hogan.js engine support</div><div class="line">    -v, --view &lt;engine&gt; add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)</div><div class="line">    -c, --css &lt;engine&gt;  add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)</div><div class="line">        --git           add .gitignore</div><div class="line">    <span class="_">-f</span>, --force         force on non-empty directory</div></pre></td></tr></table></figure></p>
<p>当前工作目录中创建名为 myapp 的 Express 应用程序：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ express --view=jade myapp</div><div class="line"></div><div class="line">   create : myapp</div><div class="line">   create : myapp/package.json</div><div class="line">   create : myapp/app.js</div><div class="line">   create : myapp/public</div><div class="line">   create : myapp/public/javascripts</div><div class="line">   create : myapp/public/images</div><div class="line">   create : myapp/routes</div><div class="line">   create : myapp/routes/index.js</div><div class="line">   create : myapp/routes/users.js</div><div class="line">   create : myapp/public/stylesheets</div><div class="line">   create : myapp/public/stylesheets/style.css</div><div class="line">   create : myapp/views</div><div class="line">   create : myapp/views/index.jade</div><div class="line">   create : myapp/views/layout.jade</div><div class="line">   create : myapp/views/error.jade</div><div class="line">   create : myapp/bin</div><div class="line">   create : myapp/bin/www</div></pre></td></tr></table></figure>
<p>‘–view=jade’ 只是说view的模板采用jade格式。该参数可选。</p>
<p>目录层级关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">─djs@DonymatoMacBook-Pro  ~/workspace/test ‹ruby-2.0.0› </div><div class="line">╰─$ tree -L 2</div><div class="line">.</div><div class="line">├── app.js</div><div class="line">├── bin</div><div class="line">│   └── www</div><div class="line">├── package.json</div><div class="line">├── public</div><div class="line">│   ├── images</div><div class="line">│   ├── javascripts</div><div class="line">│   └── stylesheets</div><div class="line">├── routes</div><div class="line">│   ├── index.js</div><div class="line">│   └── users.js</div><div class="line">└── views</div><div class="line">    ├── error.jade</div><div class="line">    ├── index.jade</div><div class="line">    └── layout.jade</div><div class="line"></div><div class="line">7 directories, 8 files</div></pre></td></tr></table></figure></p>
<p>/bin: 用于应用启动<br>/public: 静态资源目录<br>/routes：可以认为是controller（控制器）目录<br>/views: jade模板目录，可以认为是view(视图)目录<br>app.js 程序main文件</p>
<p>然后安装依赖项：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> myapp</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>如需要数据库，用已经命令安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save sequelize sequelize-cli sqlite3 <span class="comment"># install ORM , CLI and SQLite dialect</span></div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># generate models</div><div class="line">$ node_modules/.bin/sequelize init</div><div class="line">$ node_modules/.bin/sequelize model:create --name User --attributes username:string</div><div class="line">$ node_modules/.bin/sequelize model:create --name Task --attributes title:string</div></pre></td></tr></table></figure>
<p>在 MacOS 或 Linux 上，采用以下命令运行此应用程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ DEBUG=myapp:* npm start</div></pre></td></tr></table></figure></p>
<p>然后在浏览器中装入 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a> 以访问此应用程序。</p>
<h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><p>To obtain a list of commands:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node_modules/.bin/sequelize <span class="built_in">help</span></div></pre></td></tr></table></figure></p>
<p>To initialize the project:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node_modules/.bin/sequelize init</div></pre></td></tr></table></figure></p>
<p>To see how the model:create command works:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node_modules/.bin/sequelize <span class="built_in">help</span>:model:create</div></pre></td></tr></table></figure></p>
<p>To generate a model:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node_modules/.bin/sequelize model:create --name ModelName --attributes attribute1:data_type,attribute2:data_type</div></pre></td></tr></table></figure></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://docs.sequelizejs.com/" target="_blank" rel="external">sequelize 英文使用说明</a><br><a href="http://itbilu.com/nodejs/npm/N1yrA4HQW.html" target="_blank" rel="external">sequelize 中文使用说明</a><br><a href="http://expressjs.com/" target="_blank" rel="external">express 英文</a><br><a href="http://expressjs.com/" target="_blank" rel="external">express 中文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设这里已经安装了 &lt;a href=&quot;https://nodejs.org/en/#download&quot;&gt;Node.js&lt;/a&gt;，如何安装请参考官网。&lt;/p&gt;
&lt;h3 id=&quot;方法一-手动创建工程&quot;&gt;&lt;a href=&quot;#方法一-手动创建工程&quot; class=&quot;headerlink&quot; title=&quot;方法一(手动创建工程)&quot;&gt;&lt;/a&gt;方法一(手动创建工程)&lt;/h3&gt;&lt;p&gt;创建web应用目录&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ mkdir myapp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; myapp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用 npm init 命令为应用程序创建 package.json 文件。 有关 package.json 工作方式的更多信息，请参阅 &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;Specifics of npm’s package.json handling&lt;/a&gt;。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此命令提示您输入若干项，例如应用程序的名称和版本。 现在，只需按回车键以接受其中大多数项的缺省值，但以下情况例外：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;entry point: (index.js)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入 app.js，或者您希望使用的任何主文件名称。如果希望文件名为 index.js，请按回车键以接受建议的缺省文件名。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mac下使用 tree 命令在终端查看目录树结构</title>
    <link href="https://github.com/jasder/jasder.github.io/2014/09/26/mac-tool-tree/"/>
    <id>https://github.com/jasder/jasder.github.io/2014/09/26/mac-tool-tree/</id>
    <published>2014-09-26T12:26:22.000Z</published>
    <updated>2017-02-15T01:41:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>mac 下使用 <em><a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">brew包管理工具</a></em> 安装 tree。</p>
<h3 id="安装tree"><a href="#安装tree" class="headerlink" title="安装tree"></a>安装tree</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install tree</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/tree-1.7.0.el_capitan.bottle.1.tar.gz</div><div class="line">######################################################################## 100.0%</div><div class="line">==&gt; Pouring tree-1.7.0.el_capitan.bottle.1.tar.gz</div><div class="line">🍺  /usr/local/Cellar/tree/1.7.0: 7 files, 113.1K</div></pre></td></tr></table></figure>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><a id="more"></a>
<p>安装成功后,直接在终端使用, 使用 –help 查看帮助信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">─djs@DonymatoMacBook-Pro  ~ ‹ruby-2.0.0› </div><div class="line">╰─$ tree --help                                                                                                                                                </div><div class="line">usage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ]</div><div class="line">    [-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version]</div><div class="line">    [--help] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst]</div><div class="line">    [--charset charset] [--filelimit[=]#] [--si] [--timefmt[=]&lt;f&gt;]</div><div class="line">    [--sort[=]&lt;name&gt;] [--matchdirs] [--ignore-case] [--] [&lt;directory list&gt;]</div><div class="line">  ------- Listing options -------</div><div class="line">  -a            All files are listed.</div><div class="line">  -d            List directories only.</div><div class="line">  -l            Follow symbolic links like directories.</div><div class="line">  -f            Print the full path prefix for each file.</div><div class="line">  -x            Stay on current filesystem only.</div><div class="line">  -L level      Descend only level directories deep.</div><div class="line">  -R            Rerun tree when max dir level reached.</div><div class="line">  -P pattern    List only those files that match the pattern given.</div><div class="line">  -I pattern    Do not list files that match the given pattern.</div><div class="line">  --ignore-case Ignore case when pattern matching.</div><div class="line">  --matchdirs   Include directory names in -P pattern matching.</div><div class="line">  --noreport    Turn off file/directory count at end of tree listing.</div><div class="line">  --charset X   Use charset X for terminal/HTML and indentation line output.</div><div class="line">  --filelimit # Do not descend dirs with more than # files in them.</div><div class="line">  --timefmt &lt;f&gt; Print and format time according to the format &lt;f&gt;.</div><div class="line">  -o filename   Output to file instead of stdout.</div><div class="line">  -------- File options ---------</div><div class="line">  -q            Print non-printable characters as &apos;?&apos;.</div><div class="line">  -N            Print non-printable characters as is.</div><div class="line">  -Q            Quote filenames with double quotes.</div><div class="line">  -p            Print the protections for each file.</div><div class="line">  -u            Displays file owner or UID number.</div><div class="line">  -g            Displays file group owner or GID number.</div><div class="line">  -s            Print the size in bytes of each file.</div><div class="line">  -h            Print the size in a more human readable way.</div><div class="line">  --si          Like -h, but use in SI units (powers of 1000).</div><div class="line">  -D            Print the date of last modification or (-c) status change.</div><div class="line">  -F            Appends &apos;/&apos;, &apos;=&apos;, &apos;*&apos;, &apos;@&apos;, &apos;|&apos; or &apos;&gt;&apos; as per ls -F.</div><div class="line">  --inodes      Print inode number of each file.</div><div class="line">  --device      Print device ID number to which each file belongs.</div><div class="line">  ------- Sorting options -------</div><div class="line">  -v            Sort files alphanumerically by version.</div><div class="line">  -t            Sort files by last modification time.</div><div class="line">  -c            Sort files by last status change time.</div><div class="line">  -U            Leave files unsorted.</div><div class="line">  -r            Reverse the order of the sort.</div><div class="line">  --dirsfirst   List directories before files (-U disables).</div><div class="line">  --sort X      Select sort: name,version,size,mtime,ctime.</div><div class="line">  ------- Graphics options ------</div><div class="line">  -i            Don&apos;t print indentation lines.</div><div class="line">  -A            Print ANSI lines graphic indentation lines.</div><div class="line">  -S            Print with CP437 (console) graphics indentation lines.</div><div class="line">  -n            Turn colorization off always (-C overrides).</div><div class="line">  -C            Turn colorization on always.</div><div class="line">  ------- XML/HTML/JSON options -------</div><div class="line">  -X            Prints out an XML representation of the tree.</div><div class="line">  -J            Prints out an JSON representation of the tree.</div><div class="line">  -H baseHREF   Prints out HTML format with baseHREF as top directory.</div><div class="line">  -T string     Replace the default HTML title and H1 header with string.</div><div class="line">  --nolinks     Turn off hyperlinks in HTML output.</div><div class="line">  ---- Miscellaneous options ----</div><div class="line">  --version     Print version and exit.</div><div class="line">  --help        Print usage and this help message and exit.</div><div class="line">  --            Options processing terminator.</div></pre></td></tr></table></figure></p>
<p>目录遍历时使用 -L 参数指定遍历层级:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">─djs@DonymatoMacBook-Pro  ~/workspace/test ‹ruby-2.0.0› </div><div class="line">╰─$ tree -L 2</div><div class="line">.</div><div class="line">├── app.js</div><div class="line">├── bin</div><div class="line">│   └── www</div><div class="line">├── node_modules</div><div class="line">│   ├── ansicolors</div><div class="line">│   ├── bluebird</div><div class="line">│   ├── buffer-shims</div><div class="line">│   ├── cardinal</div><div class="line">│   ├── core-util-is</div><div class="line">│   ├── cross-env</div><div class="line">│   ├── cross-spawn</div><div class="line">│   ├── denque</div><div class="line">│   ├── depd</div><div class="line">│   ├── dottie</div><div class="line">│   ├── esprima</div><div class="line">│   ├── generate-function</div><div class="line">│   ├── generic-pool</div><div class="line">│   ├── iconv-lite</div><div class="line">│   ├── inflection</div><div class="line">│   ├── inherits</div><div class="line">│   ├── isarray</div><div class="line">│   ├── isexe</div><div class="line">│   ├── lodash</div><div class="line">│   ├── long</div><div class="line">│   ├── lru-cache</div><div class="line">│   ├── moment</div><div class="line">│   ├── moment-timezone</div><div class="line">│   ├── ms</div><div class="line">│   ├── mysql2</div><div class="line">│   ├── named-placeholders</div><div class="line">│   ├── node-uuid</div><div class="line">│   ├── object-assign</div><div class="line">│   ├── process-nextick-args</div><div class="line">│   ├── pseudomap</div><div class="line">│   ├── readable-stream</div><div class="line">│   ├── redeyed</div><div class="line">│   ├── retry-as-promised</div><div class="line">│   ├── safe-buffer</div><div class="line">│   ├── semver</div><div class="line">│   ├── seq-queue</div><div class="line">│   ├── sequelize</div><div class="line">│   ├── shimmer</div><div class="line">│   ├── sqlstring</div><div class="line">│   ├── string_decoder</div><div class="line">│   ├── terraformer</div><div class="line">│   ├── terraformer-wkt-parser</div><div class="line">│   ├── toposort-class</div><div class="line">│   ├── util-deprecate</div><div class="line">│   ├── validator</div><div class="line">│   ├── which</div><div class="line">│   ├── wkx</div><div class="line">│   └── yallist</div><div class="line">├── package.json</div><div class="line">├── public</div><div class="line">│   ├── images</div><div class="line">│   ├── javascripts</div><div class="line">│   └── stylesheets</div><div class="line">└── routes</div><div class="line">    ├── index.js</div><div class="line">    └── users.js</div><div class="line"></div><div class="line">55 directories, 5 files</div></pre></td></tr></table></figure></p>
<p>一目了然，非常漂亮！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mac 下使用 &lt;em&gt;&lt;a href=&quot;http://brew.sh/index_zh-cn.html&quot;&gt;brew包管理工具&lt;/a&gt;&lt;/em&gt; 安装 tree。&lt;/p&gt;
&lt;h3 id=&quot;安装tree&quot;&gt;&lt;a href=&quot;#安装tree&quot; class=&quot;headerlink&quot; title=&quot;安装tree&quot;&gt;&lt;/a&gt;安装tree&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ brew install tree&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;==&amp;gt; Downloading https://homebrew.bintray.com/bottles/tree-1.7.0.el_capitan.bottle.1.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;######################################################################## 100.0%&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;==&amp;gt; Pouring tree-1.7.0.el_capitan.bottle.1.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;🍺  /usr/local/Cellar/tree/1.7.0: 7 files, 113.1K&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo + Github Pages搭建博客</title>
    <link href="https://github.com/jasder/jasder.github.io/2013/12/27/use-hexo/"/>
    <id>https://github.com/jasder/jasder.github.io/2013/12/27/use-hexo/</id>
    <published>2013-12-27T12:26:22.000Z</published>
    <updated>2017-02-15T01:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，请自行先安装！且这里主要是针对Mac OS系统。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>hexo全局安装一次就够了，后面可以直接使用hexo相关的操作。</p>
<h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init [folder]</div></pre></td></tr></table></figure>
<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>
<a id="more"></a>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>安装hexo需要的一些依赖包。</p>
<h3 id="启动Hexo"><a href="#启动Hexo" class="headerlink" title="启动Hexo"></a>启动Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p> 启动本地web服务，用于博客的预览;成功启动后方可访问: <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000</a></p>
<h3 id="Hexo的一些常用命令"><a href="#Hexo的一些常用命令" class="headerlink" title="Hexo的一些常用命令"></a>Hexo的一些常用命令</h3><p><strong>新建文章</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &lt;title&gt;</div></pre></td></tr></table></figure></p>
<p>此时在source文件夹中便会多出一个文档”title.md”.</p>
<p><strong>生成静态页面</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate (也可用简写 hexo g)</div></pre></td></tr></table></figure></p>
<p>该命令用于生产静态文件，生成的静态内容在public文件夹内。</p>
<p><strong>清除生成内容</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure></p>
<p>执行此操作会清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>
<p><strong>部署Hexo</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy（也可用简写hexo d）</div></pre></td></tr></table></figure></p>
<p>部署播客到远端平台（比如github, heroku等平台）</p>
<p><strong>调试模式启动hexo</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --debug</div></pre></td></tr></table></figure></p>
<h3 id="常用简写"><a href="#常用简写" class="headerlink" title="常用简写"></a>常用简写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo n == hexo new</div><div class="line">$ hexo g == hexo generate</div><div class="line">$ hexo s == hexo server</div><div class="line">$ hexo d == hexo deploy</div></pre></td></tr></table></figure>
<h3 id="常用组合"><a href="#常用组合" class="headerlink" title="常用组合"></a>常用组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g <span class="comment">#生成部署</span></div><div class="line">$ hexo s -g <span class="comment">#生成预览</span></div></pre></td></tr></table></figure>
<h3 id="本博客用的themes"><a href="#本博客用的themes" class="headerlink" title="本博客用的themes"></a>本博客用的themes</h3><p><a href="https://github.com/ahonn/hexo-theme-even">hexo-theme-even</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要使用Hexo，需要在你的系统中支持Nodejs以及Git，如果还没有，请自行先安装！且这里主要是针对Mac OS系统。&lt;/p&gt;
&lt;h3 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-cli -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;hexo全局安装一次就够了，后面可以直接使用hexo相关的操作。&lt;/p&gt;
&lt;h3 id=&quot;初始化Hexo&quot;&gt;&lt;a href=&quot;#初始化Hexo&quot; class=&quot;headerlink&quot; title=&quot;初始化Hexo&quot;&gt;&lt;/a&gt;初始化Hexo&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init [folder]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ccat工具</title>
    <link href="https://github.com/jasder/jasder.github.io/2013/11/24/ccat/"/>
    <id>https://github.com/jasder/jasder.github.io/2013/11/24/ccat/</id>
    <published>2013-11-24T04:08:07.000Z</published>
    <updated>2016-11-24T06:00:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jingweno/ccat">ccat</a> 高亮 cat 内容</p>
<h3 id="安装ccat"><a href="#安装ccat" class="headerlink" title="安装ccat"></a>安装ccat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install ccat</div></pre></td></tr></table></figure>
<h3 id="ccat命令-alias-成-cat-命令"><a href="#ccat命令-alias-成-cat-命令" class="headerlink" title="ccat命令 alias 成 cat 命令"></a>ccat命令 alias 成 cat 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi ~/.zshrc</div></pre></td></tr></table></figure>
<p>打开 .zshrc文件，写入 alias cat=ccat 这行命令保存即可,如下图：</p>
<img src="/jasder.github.io/2013/11/24/ccat/0.png" alt="0.png" title="">
<a id="more"></a>
<h3 id="没安装ccat-和cat的区别"><a href="#没安装ccat-和cat的区别" class="headerlink" title="没安装ccat 和cat的区别"></a>没安装ccat 和cat的区别</h3><p>没安装ccat时cat命令示意图：</p>
<img src="/jasder.github.io/2013/11/24/ccat/1.png" alt="1.png" title="">
<p>安装ccat后 ccat命令示意图：</p>
<img src="/jasder.github.io/2013/11/24/ccat/2.png" alt="2.png" title="">
<p>将 ccat 命令 alias 成 cat后示意图：</p>
<img src="/jasder.github.io/2013/11/24/ccat/3.png" alt="3.png" title="">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/jingweno/ccat&quot;&gt;ccat&lt;/a&gt; 高亮 cat 内容&lt;/p&gt;
&lt;h3 id=&quot;安装ccat&quot;&gt;&lt;a href=&quot;#安装ccat&quot; class=&quot;headerlink&quot; title=&quot;安装ccat&quot;&gt;&lt;/a&gt;安装ccat&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ brew install ccat&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ccat命令-alias-成-cat-命令&quot;&gt;&lt;a href=&quot;#ccat命令-alias-成-cat-命令&quot; class=&quot;headerlink&quot; title=&quot;ccat命令 alias 成 cat 命令&quot;&gt;&lt;/a&gt;ccat命令 alias 成 cat 命令&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ vi ~/.zshrc&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打开 .zshrc文件，写入 alias cat=ccat 这行命令保存即可,如下图：&lt;/p&gt;
&lt;img src=&quot;/jasder.github.io/2013/11/24/ccat/0.png&quot; alt=&quot;0.png&quot; title=&quot;&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iTerm2的相关操作</title>
    <link href="https://github.com/jasder/jasder.github.io/2013/11/23/iTerm2-config/"/>
    <id>https://github.com/jasder/jasder.github.io/2013/11/23/iTerm2-config/</id>
    <published>2013-11-23T13:09:06.000Z</published>
    <updated>2017-02-15T01:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>进入 <a href="http://iterm2.com/" target="_blank" rel="external">iTerm2</a> 的 <a href="http://iterm2.com/" target="_blank" rel="external">官网</a> 下载安装。</p>
<h3 id="美化-iTerm2"><a href="#美化-iTerm2" class="headerlink" title="美化 iTerm2"></a>美化 iTerm2</h3><p>在iTerm2中使用快捷键 <strong>command + </strong>,  打开iterm2的配置文件，如图：</p>
<img src="/jasder.github.io/2013/11/23/iTerm2-config/2.png" alt="2.png" title="">  
<a id="more"></a>
<p>如果想在打开一个新的iterm窗口，直接进入上一级的相对目录下，那么只要勾选如下图红色方框内的选项即可：</p>
<img src="/jasder.github.io/2013/11/23/iTerm2-config/1.png" alt="1.png" title="">
<p>如果想使用第三方的配色，一是可以去<a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a>去选择配置，个人用的是<a href="https://draculatheme.com/" target="_blank" rel="external">draculatheme</a>里面的iterm2的主题，当然这里面还有很多其他工具比较好的主题，比如说Vim | Atom 等。</p>
<p>只要clone相应的主题下来，然后在iTerm2的Color选项中导入该配色文件即可，如：</p>
<img src="/jasder.github.io/2013/11/23/iTerm2-config/3.png" alt="3.png" title="">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进入 &lt;a href=&quot;http://iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; 的 &lt;a href=&quot;http://iterm2.com/&quot;&gt;官网&lt;/a&gt; 下载安装。&lt;/p&gt;
&lt;h3 id=&quot;美化-iTerm2&quot;&gt;&lt;a href=&quot;#美化-iTerm2&quot; class=&quot;headerlink&quot; title=&quot;美化 iTerm2&quot;&gt;&lt;/a&gt;美化 iTerm2&lt;/h3&gt;&lt;p&gt;在iTerm2中使用快捷键 &lt;strong&gt;command + &lt;/strong&gt;,  打开iterm2的配置文件，如图：&lt;/p&gt;
&lt;img src=&quot;/jasder.github.io/2013/11/23/iTerm2-config/2.png&quot; alt=&quot;2.png&quot; title=&quot;&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>zeus</title>
    <link href="https://github.com/jasder/jasder.github.io/2013/10/16/zeus/"/>
    <id>https://github.com/jasder/jasder.github.io/2013/10/16/zeus/</id>
    <published>2013-10-16T06:39:04.000Z</published>
    <updated>2016-11-24T06:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/burke/zeus">zeus</a></strong> 对rails 应用的一些相关命令进行加速启动，话说都能保证在一秒内能完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/burke/zeus&quot;&gt;zeus&lt;/a&gt;&lt;/strong&gt; 对rails 应用的一些相关命令进行加速启动，话说都能保证在一秒内能完成。&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>oh-my-zsh-config</title>
    <link href="https://github.com/jasder/jasder.github.io/2013/05/23/oh-my-zsh-config/"/>
    <id>https://github.com/jasder/jasder.github.io/2013/05/23/oh-my-zsh-config/</id>
    <published>2013-05-23T13:29:48.000Z</published>
    <updated>2017-02-15T01:41:05.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>zsh-autosuggestion</title>
    <link href="https://github.com/jasder/jasder.github.io/2013/03/24/zsh-autosuggestion/"/>
    <id>https://github.com/jasder/jasder.github.io/2013/03/24/zsh-autosuggestion/</id>
    <published>2013-03-24T04:41:49.000Z</published>
    <updated>2017-02-15T01:41:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>命令行自动提示工具 <a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestion</a></p>
<h3 id="针对Oh-My-Zsh的安装"><a href="#针对Oh-My-Zsh的安装" class="headerlink" title="针对Oh My Zsh的安装"></a>针对Oh My Zsh的安装</h3><ol>
<li><p>Clone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</div></pre></td></tr></table></figure>
</li>
<li><p>Add the plugin to the list of plugins for Oh My Zsh to load:</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(zsh-autosuggestions)</div></pre></td></tr></table></figure>
</li>
<li><p>source ~/.zshrc</p>
</li>
</ol>
<a id="more"></a>
<p>如图：<br><img src="/jasder.github.io/2013/03/24/zsh-autosuggestion/1.png" alt="1.png" title="">  </p>
<img src="/jasder.github.io/2013/03/24/zsh-autosuggestion/2.png" alt="2.png" title="">  
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;命令行自动提示工具 &lt;a href=&quot;https://github.com/zsh-users/zsh-autosuggestions&quot;&gt;zsh-autosuggestion&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;针对Oh-My-Zsh的安装&quot;&gt;&lt;a href=&quot;#针对Oh-My-Zsh的安装&quot; class=&quot;headerlink&quot; title=&quot;针对Oh My Zsh的安装&quot;&gt;&lt;/a&gt;针对Oh My Zsh的安装&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Clone this repository into $ZSH_CUSTOM/plugins (by default ~/.oh-my-zsh/custom/plugins)&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git://github.com/zsh-users/zsh-autosuggestions &lt;span class=&quot;variable&quot;&gt;$ZSH_CUSTOM&lt;/span&gt;/plugins/zsh-autosuggestions&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the plugin to the list of plugins for Oh My Zsh to load:&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;plugins=(zsh-autosuggestions)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;source ~/.zshrc&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Setup Ruby On Rails on macOS</title>
    <link href="https://github.com/jasder/jasder.github.io/2013/02/23/set-ruby-on-macos/"/>
    <id>https://github.com/jasder/jasder.github.io/2013/02/23/set-ruby-on-macos/</id>
    <published>2013-02-23T12:26:22.000Z</published>
    <updated>2017-02-15T01:36:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍在macOS系统上如何安装ruby on rails环境。</p>
<h3 id="Installing-Homebrew"><a href="#Installing-Homebrew" class="headerlink" title="Installing Homebrew"></a>Installing Homebrew</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<h3 id="Installing-Ruby"><a href="#Installing-Ruby" class="headerlink" title="Installing Ruby"></a>Installing Ruby</h3><p><strong>1. 用 <a href="https://github.com/rbenv/rbenv">rbenv</a> 来安装ruby</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ brew install rbenv ruby-build</div><div class="line"></div><div class="line"><span class="comment"># 添加rbenv bash,这样就不用重新再打开一个终端</span></div><div class="line">$ <span class="built_in">echo</span> <span class="string">'if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi'</span> &gt;&gt; ~/.bash_profile</div><div class="line">$ <span class="built_in">source</span> ~/.bash_profile</div><div class="line"></div><div class="line">$ rbenv install 2.0.0       <span class="comment"># intall ruby (这个过程会花点时间，需耐心等待)</span></div><div class="line">$ rbenv global 2.0.0        <span class="comment"># sets the default version of Ruby</span></div><div class="line">$ ruby -v                   <span class="comment"># check ruby version</span></div><div class="line"><span class="comment"># ruby 2.0.0p643            # 出现类似这样的提示，说明已经成功安装了ruby,且版本为 2.0.0p643</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>rbenv其他命令</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ rbenv versions             <span class="comment"># 列出安装的版本</span></div><div class="line">$ rbenv version              <span class="comment"># 列出正在使用的版本</span></div><div class="line">$ rbenv global 1.9.3-p392    <span class="comment"># 默认使用 1.9.3-p392</span></div><div class="line">$ rbenv shell 1.9.3-p392     <span class="comment"># 当前的 shell 使用 1.9.3-p392, 会设置一个`RBENV_VERSION` 环境变量</span></div><div class="line">$ rbenv <span class="built_in">local</span> jruby-1.7.3    <span class="comment"># 当前目录使用 jruby-1.7.3, 会生成一个 `.rbenv-version` 文件</span></div></pre></td></tr></table></figure></p>
<p><strong>rbenv 下使用 gemset</strong><br>rvm 中最方便的就是 gemset。rbenv 通过插件也可以使用 gemset。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install rbenv-gemset  <span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p><strong>创建一个 gemset</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rbenv gemset create 1.9.3-p392 ruby-china</div><div class="line">                       参数 1       参数 2</div></pre></td></tr></table></figure></p>
<p>以上命令中，参数 1 是已安装的 ruby 版本，参数 2 是 gemset 的名字</p>
<p><strong>使用方法</strong><br>在项目的根目录下，把想要使用的gemset名字放到.rbenv-gemsets文件中即可。有.rbenv-gemsets文件的情况下执行 bundle 命令就是对设置好的 gemset 进行操作。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> ruby-china &gt; .rbenv-gemsets</div></pre></td></tr></table></figure>
<p>当前目录下没有 .rbenv-gemsets 文件的情况下，执行 bundle 命令（没有指定 –path 参数的情况）时，是对当前版本的 ruby 版本的 gemset 。也就相当于 rvm 中 global gemset 的作用了。</p>
<p><strong>参考</strong><br><a href="https://github.com/jamis/rbenv-gemset">rbenv-gemset (github)</a></p>
<p><strong>2. 用 <a href="https://rvm.io/" target="_blank" rel="external">RVM</a> 来安装ruby</strong><br>RVM 是一个命令行工具，可以提供一个便捷的多版本 Ruby 环境的管理和切换。</p>
<p><strong>Ruby 的安装与切换</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</div><div class="line">$ \curl <span class="_">-s</span>SL https://get.rvm.io | bash <span class="_">-s</span> stable</div><div class="line">$ <span class="built_in">source</span> ~/.bashrc</div><div class="line">$ <span class="built_in">source</span> ~/.bash_profile</div><div class="line"></div><div class="line"><span class="comment"># 修改 RVM 的 Ruby 安装源到 Ruby China 的 Ruby 镜像服务器，这样能提高安装速度</span></div><div class="line">$ <span class="built_in">echo</span> <span class="string">"ruby_url=https://cache.ruby-china.org/pub/ruby"</span> &gt; ~/.rvm/user/db</div><div class="line"></div><div class="line"><span class="comment"># 列出已知的 Ruby 版本</span></div><div class="line">$ rvm list known</div><div class="line"></div><div class="line"><span class="comment"># 安装一个 Ruby 版本</span></div><div class="line">$ rvm install 2.0.0 --disable-binary  <span class="comment"># 这里安装了ruby 2.0.0的版本, rvm list known 列表里面的都可以拿来安装。</span></div><div class="line"></div><div class="line"><span class="comment"># 查询已经安装的ruby</span></div><div class="line">$ rvm list</div><div class="line"></div><div class="line"><span class="comment"># 卸载一个已安装版本</span></div><div class="line">$ rvm remove 1.8.7</div></pre></td></tr></table></figure></p>
<p><strong>gemset 的使用</strong><br>RVM 不仅可以提供一个多 Ruby 版本共存的环境，还可以根据项目管理不同的 gemset。</p>
<p>gemset 可以理解为是一个独立的虚拟 Gem 环境，每一个 gemset 都是相互独立的。</p>
<p>比如你有两个项目，一个是 Rails 2.3 一个是 rails3. gemset 可以帮你便捷的建立两套 Gem 开发环境，并且方便的切换。</p>
<p>gemset是附加在 Ruby 语言版本下面的，例如你用了 1.9.2, 建立了一个叫 rails3 的gemset,当切换到 1.8.7 的时候，rails3 这个 gemset 并不存在。</p>
<p><strong>建立 gemset</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rvm use 1.8.7</div><div class="line">$ rvm gemset create rails23</div></pre></td></tr></table></figure></p>
<p>然后可以设定已建立的 gemset 做为当前环境。</p>
<p><strong>use 可以用来切换语言或者 gemset</strong><br>前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rvm use 1.8.7</div><div class="line">$ rvm use 1.8.7@rails23</div></pre></td></tr></table></figure>
<p>然后所有安装的 Gem 都是安装在这个 gemset 之下</p>
<p><strong>列出当前 Ruby 的 gemset</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rvm gemset list</div></pre></td></tr></table></figure></p>
<p><strong>清空 gemset 中的 Gem</strong><br>如果你想清空一个 gemset 的所有 Gem, 想重新安装所有 Gem，可以这样</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rvm gemset empty 1.8.7@rails23</div></pre></td></tr></table></figure>
<p><strong>删除一个 gemset</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rvm gemset delete rails2-3</div></pre></td></tr></table></figure></p>
<p><strong>项目自动加载 gemset</strong><br>RVM 还可以自动加载 gemset。<br>例如我们有一个 Rails 3.1.3 项目，需要 1.9.3 版本 Ruby，整个流程可以这样。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ rvm install 1.9.3</div><div class="line">$ rvm use 1.9.3</div><div class="line">$ rvm gemset create rails313</div><div class="line">$ rvm use 1.9.3@rails313</div></pre></td></tr></table></figure></p>
<p>下面进入到项目目录，建立一个 .rvmrc 文件。</p>
<p>在这个文件里可以很简单的加一个命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rvm use 1.9.3@rails313</div></pre></td></tr></table></figure></p>
<p>然后无论你当前 Ruby 设置是什么，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要介绍在macOS系统上如何安装ruby on rails环境。&lt;/p&gt;
&lt;h3 id=&quot;Installing-Homebrew&quot;&gt;&lt;a href=&quot;#Installing-Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Installing Homebrew&quot;&gt;&lt;/a&gt;Installing Homebrew&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ruby &lt;span class=&quot;_&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Installing-Ruby&quot;&gt;&lt;a href=&quot;#Installing-Ruby&quot; class=&quot;headerlink&quot; title=&quot;Installing Ruby&quot;&gt;&lt;/a&gt;Installing Ruby&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1. 用 &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt; 来安装ruby&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ brew install rbenv ruby-build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 添加rbenv bash,这样就不用重新再打开一个终端&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;if which rbenv &amp;gt; /dev/null; then eval &quot;$(rbenv init -)&quot;; fi&#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; ~/.bash_profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ rbenv install 2.0.0       &lt;span class=&quot;comment&quot;&gt;# intall ruby (这个过程会花点时间，需耐心等待)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ rbenv global 2.0.0        &lt;span class=&quot;comment&quot;&gt;# sets the default version of Ruby&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ruby -v                   &lt;span class=&quot;comment&quot;&gt;# check ruby version&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ruby 2.0.0p643            # 出现类似这样的提示，说明已经成功安装了ruby,且版本为 2.0.0p643&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tig工具</title>
    <link href="https://github.com/jasder/jasder.github.io/2013/01/20/tig/"/>
    <id>https://github.com/jasder/jasder.github.io/2013/01/20/tig/</id>
    <published>2013-01-20T01:08:17.000Z</published>
    <updated>2017-02-15T01:40:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://jonas.github.io/tig/INSTALL.html" target="_blank" rel="external">tig</a></strong> 高亮美化 git commit 工具<br>安装使用请参考 <a href="https://jonas.github.io/tig/" target="_blank" rel="external">https://jonas.github.io/tig/</a></p>
<a id="more"></a>
<p>使用情况如图：<br><img src="/jasder.github.io/2013/01/20/tig/1.png" alt="1.png" title=""></p>
<img src="/jasder.github.io/2013/01/20/tig/2.png" alt="2.png" title="">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://jonas.github.io/tig/INSTALL.html&quot;&gt;tig&lt;/a&gt;&lt;/strong&gt; 高亮美化 git commit 工具&lt;br&gt;安装使用请参考 &lt;a href=&quot;https://jonas.github.io/tig/&quot;&gt;https://jonas.github.io/tig/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
